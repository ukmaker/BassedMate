/**************************************************
 * Copyright 2021 Duncan McIntyre
 * MIDI Bass Guitar Toolbox
 *************************************************/

 /**
  * Volume:
  * Instrument: Allows selection of the instrument
  * Matrix: Starts to use the NeoTrellis to assign notes to beats
  *  : Uses the 2x2 keypad for function select
  */

#include <Arduino.h>

#include <Adafruit_GFX.h>    // Core graphics library
#include <ST7735_t3.h>    // Hardware-specific library
#include "Screen.h"
#include "VS1053.h"

#define ENCODER_USE_INTERRUPTS 
#include <Encoder.h>
#include <core_pins.h>

#include "Controls.h"
#include "TwoByTwo.h"

#include "Adafruit_NeoTrellis.h"

#define Y_DIM 4 //number of rows of key
#define X_DIM 8 //number of columns of keys

//create a matrix of trellis panels
Adafruit_NeoTrellis t_array[Y_DIM/4][X_DIM/4] = {
  
  { Adafruit_NeoTrellis(0x2E), Adafruit_NeoTrellis(0x2F) }
  
};

//pass this matrix to the multitrellis object
Adafruit_MultiTrellis trellis((Adafruit_NeoTrellis *)t_array, Y_DIM/4, X_DIM/4);

#include "AD5204.h"
/**
 * Screen is an ST7735 based 1.8" screen without touch
 */
#define SC_SCL 27
#define SC_SDA 26
#define SC_CS 0
#define SC_DC 28
#define SC_RESET 29

/**
 * Music player is a VS1053 basic breakout board
 */
#define MP_MOSI 11
#define MP_MISO 12
#define MP_SCK 13
#define MP_CS 25
#define MP_DCS 10
#define MP_DREQ UNUSED
#define MP_RESET 24

#define ENC_VOL_L 30
#define ENC_VOL_R 31

#define ENC_SEL_L 22
#define ENC_SEL_R 23

#define ENC_TEMPO_L 40
#define ENC_TEMPO_R 41
#define ENC_TEMPO_B 39

#define DP_CS 15
#define DP_CLK 16
#define DP_SDI 17
#define DP_MASTER_VOL 2

// The 2x2 Keypad
#define TR_R 1
#define TR_G 2
#define TR_B 3
#define TR_LG1 4
#define TR_LG2 5
#define TR_LG3 6
#define TR_LG4 7
#define TR_B1 33
#define TR_B2 34
#define TR_B3 35
#define TR_B4 36


ST7735_t3 tft = ST7735_t3(SC_CS, SC_DC, SC_SDA, SC_SCL, SC_RESET);

VS1053 midi = VS1053(MP_CS, MP_DCS, MP_RESET, MP_SCK, MP_MOSI, MP_MISO);

Screen screen(tft, SC_SCL, SC_SDA);

MIDINote note = {true, 0,27,127, false};

Controls controls(ENC_VOL_L, ENC_VOL_R, ENC_SEL_L, ENC_SEL_R, ENC_TEMPO_L, ENC_TEMPO_R, ENC_TEMPO_B);

AD5204 pots(DP_CS, DP_CLK, DP_SDI);

long voice = 27;
uint32_t ticks = 0;
uint32_t millisPerBeat = 1000;
int beat = -1;
boolean running = true;

MIDINote notes[8][4];
MIDINote lastNotes[4];

void volumeCallback(int volume) {
    setMasterVolume(volume);
}

void selectCallback(int sel) {
  if(sel < 27) {
    sel = 27;
    controls.setSelect(sel);
  } else if(sel > 87) {
    sel = 87;
    controls.setSelect(sel);
  }
  setVoice(sel);
}

void tempoCallback(int tempo) {
  if(tempo < 20) {
    tempo = 20;
    controls.setTempo(tempo);
  } else if(tempo > 200) {
    tempo = 200;
    controls.setTempo(tempo);
  }
  setTempo(tempo);
}

void tempoButtonCallback(int unused) {
  running = !running;
  screen.showRunning(running);
}


void setup() {
  
  Serial.begin(9600);
  if(!trellis.begin()){
    Serial.println("failed to begin trellis");
    while(1);
  }

    /* the array can be addressed as x,y or with the key number */
  for(int i=0; i<Y_DIM*X_DIM; i++){
      trellis.setPixelColor(i, Wheel(map(i, 0, X_DIM*Y_DIM, 0, 255))); //addressed with keynum
      trellis.show();
      delay(50);
  }
  
  for(int y=0; y<Y_DIM; y++){
    for(int x=0; x<X_DIM; x++){
      //activate rising and falling edges on all keys
      trellis.activateKey(x, y, SEESAW_KEYPAD_EDGE_RISING, true);
      trellis.activateKey(x, y, SEESAW_KEYPAD_EDGE_FALLING, true);
      trellis.registerCallback(x, y, blink);
      trellis.setPixelColor(x, y, 0x000000); //addressed with x,y
      trellis.show(); //show all LEDs
      delay(50);
    }
  }
  
  controls.attachVolumeCallback(volumeCallback);
  controls.attachSelectCallback(selectCallback);
  controls.attachTempoCallback(tempoCallback);
  controls.attachTempoButtonCallback(tempoButtonCallback);

  // Set the slew rate to minimum for reliable operation
  // Otherwise it looks like ringing on the DCS line causes false writes to the SDI registers
  // MP_DCS 10
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_00 = (IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_00 & 0b1111111111000110) | 0x0008;
  // MP_MOSI 11
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = (IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 & 0b1111111111000110) | 0x0008;
  // MP_SCK 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = (IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 & 0b1111111111000110) | 0x0008;
  // MP_CS 25
  IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13 = (IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13 & 0b1111111111000110) | 0x0008;

  controls.setVolume(127);
  setMasterVolume(127);
  
  midi.setBank(0, MIDI_BANK_PERCUSSION);
  midi.setInstrument(0, 27);
  selectCallback(27);

  controls.setTempo(70);
  setTempo(70);

  for(int y = 0; y < 4; y++) {
    lastNotes[y] = {false, 0,0,0, false};
    for(int x = 0; x < 8; x++) {
      notes[x][y] = {false, 0,0,0, false};
    }
  }
}

void loop() {
      
  if(running) {
    long t = millis();
  
    if((t - ticks) > millisPerBeat) {
      beat++;
      if(beat > 7) beat = 0;
      for(int y =0; y < 4 ; y++) {
        if(lastNotes[y].played) midi.noteOff(lastNotes[y]);
        if(notes[beat][y].played) midi.noteOn(notes[beat][y]);
        lastNotes[y] = notes[beat][y];
      }
      ticks = t;
    }
  }
  trellis.read();
  controls.update();
}

void setVoice(uint8_t voice) {
  note.note = voice;

  char * names[5];
  for(int i=-2; i < 3; i++) {
    names[i+2] = midi.getInstrumentName(voice+i);
  }
  screen.printInstrumentNames(names);
}

void setMasterVolume(uint8_t volume) {
    pots.write(DP_MASTER_VOL,volume);
    screen.drawVolumeBar(volume); 
    if(volume == 0) {
      midi.setVolume(0,0); 
    } else {
      midi.setVolume(0,127);
    }
}

void setTempo(int tempo) {
  // tempo range is 20 - 200 BPM
  // millis per beat (bpm / 60 * 1000
  millisPerBeat = 60000 / tempo;
  screen.printTempo(tempo);
}








// Input a value 0 to 255 to get a color value.
// The colors are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return seesaw_NeoPixel::Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return seesaw_NeoPixel::Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return seesaw_NeoPixel::Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  return 0;
}

//define a callback for key presses
TrellisCallback blink(keyEvent e) {
  
  if(e.bit.EDGE == SEESAW_KEYPAD_EDGE_FALLING) {
    int x = e.bit.NUM % X_DIM;
    int y = e.bit.NUM / X_DIM;
    // to start with we toggle the state
    // if there's no assigned instrument already, use the current voice
    notes[x][y].played = !notes[x][y].played;
  
    if(notes[x][y].played) {
      
      if(!notes[x][y].assigned) {
        notes[x][y].note = note.note;
        notes[x][y].velocity = 127;
        notes[x][y].assigned = true;
      }
      
      trellis.setPixelColor(e.bit.NUM, seesaw_NeoPixel::Color(0,0xff,0));
    } else {
      trellis.setPixelColor(e.bit.NUM, seesaw_NeoPixel::Color(0,0,0));
    }
  }
    
  trellis.show();
  return 0;
}
